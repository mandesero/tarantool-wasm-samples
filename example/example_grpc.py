# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: example.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import example_pb2


class GreeterBase(abc.ABC):

    @abc.abstractmethod
    async def SayHello(self, stream: 'grpclib.server.Stream[example_pb2.HelloRequest, example_pb2.HelloReply]') -> None:
        pass

    @abc.abstractmethod
    async def ProcessNumber(self, stream: 'grpclib.server.Stream[example_pb2.NumberRequest, example_pb2.NumberReply]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/example.Greeter/SayHello': grpclib.const.Handler(
                self.SayHello,
                grpclib.const.Cardinality.UNARY_UNARY,
                example_pb2.HelloRequest,
                example_pb2.HelloReply,
            ),
            '/example.Greeter/ProcessNumber': grpclib.const.Handler(
                self.ProcessNumber,
                grpclib.const.Cardinality.UNARY_UNARY,
                example_pb2.NumberRequest,
                example_pb2.NumberReply,
            ),
        }


class GreeterStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.SayHello = grpclib.client.UnaryUnaryMethod(
            channel,
            '/example.Greeter/SayHello',
            example_pb2.HelloRequest,
            example_pb2.HelloReply,
        )
        self.ProcessNumber = grpclib.client.UnaryUnaryMethod(
            channel,
            '/example.Greeter/ProcessNumber',
            example_pb2.NumberRequest,
            example_pb2.NumberReply,
        )
